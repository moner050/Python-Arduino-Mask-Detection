#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <LiquidCrystal_I2C.h>
#include "talkie.h"

#define I2C_ADDR 0x27 //I2C Address
#define BACKLIGHT_PIN 3
#define mskOff 12
#define mskOn  13
#define espRedLED 5
#define espGreenLED 6

Talkie voice;
const uint8_t sp1[] PROGMEM = {0x80, 0xa2, 0x22, 0x4d, 0xdd, 0xd4, 0x66, 0xf2, 0x8a, 0x76, 0x73, 0x55, 0x5b, 0x0a, 0x88, 0xb6, 0xf2, 0x88, 0x2a, 0x5a, 0x84, 0x6a, 0xb3, 0x23, 0x85, 0x22, 0x9e, 0x42, 0x4d, 0x8e, 0x62, 0x93, 0xca, 0x18, 0x37, 0x5e, 0x0a, 0xea, 0x26, 0x1f, 0x12, 0xb7, 0xc8, 0xe0, 0xbb, 0x4c, 0x89, 0x9d, 0x22, 0x82, 0x6f, 0x95, 0x6a, 0x49, 0x82, 0x04, 0x7e, 0x65, 0x98, 0xc5, 0x0e, 0x52, 0x90, 0xe6, 0xe5, 0x6a, 0xaf, 0x51, 0xc1, 0x68, 0xae, 0xb1, 0xbd, 0x43, 0xb8, 0xe6, 0xa9, 0xe2, 0x71, 0x0e, 0xee, 0xab, 0xa7, 0xaa, 0x57, 0x3e, 0x84, 0x2e, 0x95, 0x2a, 0xd6, 0xb4, 0x10, 0x6c, 0xad, 0x49, 0x64, 0xd3, 0x42, 0xb0, 0xf6, 0x85, 0x35, 0x55, 0x0a, 0x41, 0xc7, 0x27, 0xe5, 0xd4, 0x4e, 0x14, 0x79, 0x15, 0x56, 0xdd, 0xc6, 0xd1, 0xe8, 0x6b, 0x66, 0x64, 0x6b, 0xc3, 0x83, 0x2f, 0xe5, 0xe6, 0x89, 0x9d, 0x0a, 0xbe, 0x7a, 0xb8, 0xc6, 0x2e, 0x26, 0x38, 0x5f, 0xc6, 0x92, 0x24, 0x39, 0xe0, 0x9c, 0x13, 0x44, 0x5d, 0x15, 0x80, 0x79, 0x29, 0x20, 0x75, 0x9a, 0xa7, 0x5d, 0x45, 0x98, 0x86, 0x39, 0xac, 0x0b, 0x55, 0x4a, 0x5c, 0xe5, 0xc4, 0x21, 0x47, 0xa0, 0x4a, 0xed, 0x95, 0xc4, 0x1c, 0x4e, 0x2a, 0x89, 0x97, 0x50, 0x43, 0x25, 0x07, 0x3a, 0x59, 0x69, 0xb1, 0xee, 0xec, 0x6c, 0x67, 0xe8, 0x5d, 0xbb, 0x61, 0x92, 0x53, 0x06, 0xb4, 0x1a, 0x0e, 0x00, 0xf0, 0xff};
const uint8_t sp2[] PROGMEM = {0xa0, 0x30, 0x71, 0x55, 0x66, 0x98, 0x71, 0xd1, 0xc5, 0x65, 0xbf, 0x45, 0xc6, 0x43, 0xe6, 0xcf, 0x25, 0x17, 0x68, 0x2f, 0x91, 0x4d, 0xb7, 0x1c, 0x54, 0x3c, 0x44, 0x38, 0x26, 0xad, 0x31, 0x49, 0x10, 0xc0, 0x0f, 0x17, 0xd3, 0x35, 0x4e, 0x00, 0xdf, 0x54, 0x2b, 0xe2, 0x1a, 0x01, 0x7c, 0xb6, 0x68, 0xb3, 0xa7, 0x24, 0xf0, 0x59, 0xb4, 0x33, 0xf6, 0x92, 0xa5, 0xb3, 0xda, 0xa4, 0xc4, 0x87, 0xe0, 0xa5, 0x2a, 0x82, 0xda, 0x2c, 0x9c, 0xef, 0xd0, 0x2c, 0xf1, 0xd6, 0x08, 0xfe, 0xd4, 0xd7, 0xa8, 0xbf, 0xa3, 0x65, 0x0d, 0x0b, 0xf7, 0xa8, 0x8d, 0x54, 0xad, 0x34, 0x4c, 0xda, 0x1e, 0xc2, 0x97, 0x31, 0x37, 0x6a, 0x72, 0x88, 0x90, 0xcb, 0x53, 0xb9, 0xca, 0x21, 0x42, 0x88, 0x2c, 0x91, 0xaa, 0x87, 0x08, 0xc1, 0xab, 0x98, 0xeb, 0x1c, 0xda, 0x85, 0x8a, 0x24, 0xad, 0x5a, 0x24, 0xf0, 0x2b, 0x93, 0xad, 0x8e, 0x53, 0xc0, 0xb7, 0x14, 0xf1, 0xda, 0x43, 0x00, 0xb7, 0x33, 0x9c, 0xe6, 0x0c, 0x96, 0x4c, 0xaf, 0x56, 0x69, 0x9a, 0x18, 0xda, 0xb5, 0x37, 0x24, 0x99, 0xd1, 0x41, 0xeb, 0x4a, 0xf7, 0x24, 0x49, 0x8d, 0x4a, 0xad, 0x5c, 0x9d, 0x20, 0xa0, 0x18, 0xf7, 0x60, 0x79, 0x61, 0x5e, 0x2e, 0x69, 0x82, 0xe2, 0x94, 0x45, 0xbb, 0x26, 0x69, 0x04, 0xdd, 0x93, 0x29, 0xba, 0x38, 0x91, 0xe4, 0x97, 0x65, 0xc6, 0x2c, 0x47, 0xe2, 0xaf, 0x19, 0xee, 0xa9, 0x03, 0x85, 0x7f, 0x85, 0x87, 0xd9, 0x69, 0x0c, 0x1a, 0xbf, 0xa6, 0x1e, 0xbb, 0x08, 0xe0, 0x7d, 0x89, 0x66, 0xa2, 0xa2, 0x82, 0x77, 0xc9, 0x54, 0xb1, 0x83, 0x05, 0xde, 0x06, 0xb3, 0x27, 0x29, 0x82, 0x37, 0x11, 0x66, 0x5a, 0x65, 0x05, 0x22, 0x55, 0x09, 0x6a, 0x95, 0x91, 0x84, 0x10, 0x41, 0x44, 0x4d, 0x96, 0x90, 0x5c, 0xa4, 0x18, 0xda, 0x39, 0x42, 0x72, 0xe6, 0x62, 0xd4, 0xf8, 0x08, 0xc9, 0x9a, 0x69, 0x52, 0x92, 0x21, 0x55, 0xed, 0x4e, 0x89, 0x4d, 0x92, 0x94, 0xb8, 0x3b, 0x37, 0xc5, 0x65, 0x69, 0xe3, 0x9e, 0x1c, 0x6c, 0x06, 0x00, 0x1e, 0xff};
const uint8_t sp3[] PROGMEM = {0x4a, 0x07, 0x5f, 0x4b, 0x8c, 0xd4, 0x24, 0x03, 0xfc, 0xa8, 0x0a, 0xb1, 0x7c, 0x34, 0x96, 0xc2, 0x33, 0xa8, 0xcd, 0x51, 0x82, 0x37, 0x0f, 0xa5, 0xa4,
0x47, 0x8e, 0xce, 0xcd, 0x1d, 0x93, 0x1e, 0x31, 0x38, 0x8f, 0x14, 0x4e, 0x72, 0x38, 0x5e, 0x22, 0x5c, 0xac, 0x59, 0x12, 0x71, 0x9a, 0x9a, 0xd0, 0x38, 0x8e, 0x2f, 0x4c, 0xdc, 0xdd, 0x93, 0x22,
0xa0, 0xe5, 0x50, 0xd3, 0x67, 0xc7, 0xcc, 0x62, 0x71, 0x11, 0x1f, 0xa5, 0x8a, 0x7a, 0x36, 0x46, 0x40, 0x89, 0x54, 0x4d, 0x74, 0x46, 0xba, 0xd2, 0xe2, 0x2c, 0x8e, 0xa4, 0xe9, 0x08, 0x4a, 0x7a,
0x58, 0x6e, 0xbb, 0xab, 0x31, 0xd9, 0xa2, 0xb8, 0xaf, 0xe9, 0x16, 0xa7, 0x87, 0xb0, 0x3a, 0xa6, 0x86, 0x9d, 0x1f, 0x42, 0x9b, 0x9a, 0x6a, 0x76, 0xb7, 0x08, 0x9e, 0x66, 0x3b, 0xb9, 0x69, 0xa2,
0x58, 0x9a, 0xa9, 0xb0, 0x24, 0x81, 0x2e, 0xc2, 0xdd, 0xc5, 0x6c, 0x3b, 0xa6, 0x08, 0xf7, 0x70, 0x71, 0x9c, 0x38, 0xde, 0x2a, 0x43, 0x25, 0xe9, 0x11, 0x5c, 0x8d, 0x08, 0xe5, 0x26, 0x87, 0x0d, 0x35, 0xdc,
0x05, 0x9b, 0x1e, 0x2a, 0xe4, 0x88, 0x54, 0x6e, 0xd2, 0x58, 0x9e, 0x2b, 0x53, 0xa5, 0xa9, 0x11, 0xb8, 0x9e, 0xac, 0xf4, 0x24, 0x89, 0x54, 0x7a, 0xaa, 0xd2, 0x52, 0x2f, 0x8a, 0xfb, 0x9e, 0x6d, 0xaa, 0xdb,
0x28, 0x5a, 0x6a, 0xd7, 0xa9, 0x49, 0xa0, 0x58, 0xe8, 0xce, 0x88, 0x38, 0x49, 0xac, 0x2a, 0xdc, 0xcc, 0x63, 0x17, 0x4e, 0xba, 0xaa, 0x14, 0xad, 0x7b, 0x38, 0x91, 0x2a, 0x55, 0xbc, 0xde, 0x11, 0x55, 0x09,
0x13, 0xf1, 0xa6, 0x47, 0xd3, 0xa5, 0x9c, 0xc4, 0xaa, 0x1e, 0x5b, 0xe7, 0x48, 0x62, 0xab, 0x7b, 0x7c, 0x53, 0x3c, 0x48, 0xb4, 0xce, 0x89, 0x7d, 0xf1, 0x60, 0xa5, 0x26, 0x27, 0xf6, 0x45, 0x5d, 0x0d, 0x1b,
0x1f, 0x2e, 0x14, 0x71, 0x77, 0xa8, 0x7d, 0xd8, 0xd0, 0xd8, 0xc3, 0x31, 0xf1, 0x09, 0x42, 0x67, 0xcd, 0xc0, 0x24, 0xcb, 0x0b, 0x93, 0xb5, 0x1d, 0x63, 0x0f, 0xd7, 0x4f, 0xf2, 0x15, 0x4c, 0x92, 0x5c, 0x3d,
0xd1, 0x56, 0xb0, 0xa9, 0x71, 0x51, 0x23, 0x3f, 0xd3, 0xd9, 0xc4, 0x07, 0x5d, 0x62, 0xcd, 0xea, 0x00, 0x00, 0x3c, 0xff};

LiquidCrystal_I2C lcd(I2C_ADDR,16,2);

Adafruit_MLX90614 mlx = Adafruit_MLX90614();
void setup() 
{
  Wire.begin();
  pinMode(mskOff,INPUT);
  pinMode(mskOn,INPUT);
  pinMode(espRedLED,OUTPUT);
  pinMode(espGreenLED,OUTPUT);
  
  mlx.begin();
  Serial.begin(9600);
  pinMode(2,INPUT); // IR센서 핀 2로 설정
  lcd.begin(16,2);
  lcd.setBacklight(HIGH); // LCD Backlight ON
  lcd.home ();

}

void loop() 
{
  int isMaskOff = digitalRead(mskOff);
  int isMaskOn = digitalRead(mskOn);

  
   if(digitalRead(2)==LOW && isMaskOff)
   {
      delay(1500);
      MskOff();
   }
   else if(digitalRead(2)==LOW && isMaskOn)
   {
      delay(1500);
      MskOn();
   }
   else
   {
      Blank();
   }
}

void MskOff()
{
  lcd.clear();
  digitalWrite(espRedLED, HIGH);
  digitalWrite(espGreenLED, LOW);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Target ");
  lcd.print(mlx.readObjectTempC() + 4);
  lcd.print(" C");
  lcd.setCursor(0,1);
  lcd.print("No Mask! ");
  voice.say(sp3);
  delay(2500);
}

void MskOn()
{
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Target ");
  lcd.print(mlx.readObjectTempC()+4);
  lcd.print(" C");
  lcd.setCursor(0,1);
  if((mlx.readObjectTempC() + 4) >= 36.0 && (mlx.readObjectTempC() + 4) <= 37.5)
  {
    lcd.print("   GOOD!");
    digitalWrite(espRedLED, LOW);
    digitalWrite(espGreenLED, HIGH);
    voice.say(sp1);
    delay(2500);
  }
  else if((mlx.readObjectTempC() + 4) < 36.0)
  {
    lcd.print("Temp is LOW! ");
    digitalWrite(espRedLED, LOW);
    digitalWrite(espGreenLED, HIGH);
    voice.say(sp1);
    delay(2500);
  }
  else
  {
    lcd.print("Temp is HIGH! ");
    digitalWrite(espRedLED, HIGH);
    digitalWrite(espGreenLED, LOW);
    voice.say(sp2);
    delay(2500);
  }
}

void Blank()
{
  lcd.clear();
  digitalWrite(espRedLED, LOW);
  digitalWrite(espGreenLED, LOW);
  lcd.setCursor(0,0);
  lcd.print("Here Temp ");
  lcd.print(mlx.readAmbientTempC()-1.5);
  lcd.print("C");
  lcd.setCursor(0,1);
  if((mlx.readAmbientTempC() - 1.5) <= 28) 
  {
    lcd.print("Good Weather");
    delay(2500);
  }
  else
  {
    lcd.print("Bad Weather ");
    delay(2500);
  }
}
